use kowalski_data_agent::DataAgent;use kowalski_core::config::Config;use kowalski_core::agent::Agent;use tokio::time::Instant;use futures::StreamExt;async fn process_stream_response(mut response: reqwest::Response) -> Result<String, String> {    let mut buffer = String::new();    let mut stream = response.bytes_stream();    while let Some(chunk) = stream.next().await {        match chunk {            Ok(bytes) => {                let text = String::from_utf8(bytes.to_vec())                    .map_err(|e| format!("Invalid UTF-8: {}", e))?;                let stream_response: serde_json::Value = serde_json::from_str(&text)                    .map_err(|e| format!("JSON parse error: {}", e))?;                if let Some(message_val) = stream_response.get("message") {                    if let Some(content) = message_val.get("content") {                        buffer.push_str(content.as_str().unwrap_or(""));                    }                }            }            Err(e) => return Err(format!("Stream error: {}", e)),        }    }    Ok(buffer)}#[tokio::main]async fn main() -> Result<(), Box<dyn std::error::Error>> {    env_logger::init();    let config = Config::default();    let mut data_agent = DataAgent::new(config).await?;    let conversation_id = data_agent.start_conversation("llama3.2");    let csv_data = r#"name,age,city,salary,departmentJohn Doe,30,New York,75000,EngineeringJane Smith,28,San Francisco,85000,MarketingBob Johnson,35,Chicago,65000,SalesAlice Brown,32,Boston,70000,EngineeringCharlie Wilson,29,Seattle,80000,EngineeringDiana Davis,31,Austin,72000,MarketingEve Miller,27,Denver,68000,SalesFrank Garcia,33,Portland,75000,EngineeringGrace Lee,26,Atlanta,65000,MarketingHenry Taylor,34,Dallas,78000,Engineering"#;    let start_time = Instant::now();    let analysis_result = data_agent.process_csv(csv_data).await?;    let analysis_prompt = format!(        "Analyze this data and provide insights:\n\n{}\n\nAnalysis results:\n{}",        csv_data,        serde_json::to_string_pretty(&analysis_result.summary)?    );    let response = data_agent.chat_with_history(&conversation_id, &analysis_prompt, None).await?;    let full_response = process_stream_response(response).await?;    let elapsed = start_time.elapsed();    println!("Kowalski (CSV Analysis) - Response: {}", full_response);    println!("Kowalski (CSV Analysis) - Time: {:?}", elapsed);    Ok(())}